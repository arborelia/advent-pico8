pico-8 cartridge // http://www.pico-8.com
version 34
__lua__
function pause()
 while btn(🅾️) or btn(❎) do
  flip()
 end
 while not btn(🅾️) or btn(❎) do
  flip()
 end
end

-- if we passed the test on
-- the site, celebrate
function yay()
 star()
 cursor(28, 90)
 print("\ac1g2c3e3c4")
 color(10)
 print("you did the thing!")
 
 pause()
end

function star()
 cls(1)
 
 -- draw a fancy textured star.
 -- it's okay that it takes
 -- a while to draw because
 -- that makes it look cooler
 local nsteps=20000
 for step=1,nsteps do
  local angle = step / nsteps + .25
  local wobble = sin(angle * 5)
  local radius = 20 + wobble*5
  if radius > 20 then
   radius += wobble * wobble * 5
  end
  local x = 64 + cos(angle) * radius
  local y = 64 - sin(angle) * radius
  line(64, 64, x, y, 9)
  
  radius *= 0.8
  x = 64 + cos(angle) * radius
  y = 64 - sin(angle) * radius
  line(64, 64, x, y, 10)
 end
end

function check(answer)
 color(11)
 print("check answer: "..answer)
 pause()
 if (btn(🅾️)) yay()
end

function test(result, expected, name)
 if type(result) != type(expected) then
  color(8)
  print("\ae- 😐 \0")
  print("expected "..type(expected)..", got "..type(result))
  assert(false)
 else
  -- we can't print bools???
  if result==true then
   result = "true"
  end
  if result==false then
   result = "false"
  end
  if result==nil then
   result = "nil"
  end
  if expected==true then
   expected = "true"
  end
  if expected==false then
   expected = "false"
  end
  if expected==nil then
   expected = "nil"
  end
  
  -- compare tables
  if type(result) == "table" then
   return test_list(result, expected, name)
  end

  checktext = result.." = "..expected
  if result == expected then
   succeed(name, result)
  else
   fail(name, result.." != "..expected)
  end
 end
end

function test_list(result, expected, name)
 if #result == 0 then
  color(10)
  print("\ae- 😐 can't test keys")
  return
 end
 if #result != #expected then
  fail(name, "#elements "..#expected.." != "..#result)
 end
 for i=1,#expected do
  if result[i] != expected[i] then
   fail(name, "["..i.."] "..result[i].." != "..expected[i])
  end
 end
 succeed(name, "[table]")
end

function succeed(name, msg)
 color(11)
 print("\ag ♥ \0")
 color(7)
 if name != nil then
  print(name..": \0")
 end
 print(msg)
end

function fail(name, msg)
 color(8)
 print("\ae- ❎ \0")
 color(7)
 if name != nil then
  print(name..": \0")
 end
 print(msg)
 assert(false)
end


-->8
function minify(num)
 return shr(num,16)
end

function bigify(num)
 return shl(num,16)
end

function inttext(val)
 return tostr(val, 2)
end

function bigmul(a, b)
 -- returns a string of a * b
 -- a and b are fixed point nums
 prod = minify(a) * b
 return inttext(prod)
end

function mul32(a, b)
 -- multiplies a * b
 -- where both of them are 32bit ints
 -- so one of them needs to be shifted
 return a * bigify(b,16)
end

-->8
function at(str, pos)
 return sub(str, pos, pos)
end

function insertion_sort(a)
 for i=1,#a do
  local j = i
  while j > 1 and a[j-1] > a[j] do
   a[j],a[j-1] = a[j-1],a[j]
   j = j - 1
  end
 end
end

-- get a median of the table
-- (smaller of the two if there
-- is an even number of items)
function median(tbl)
 insertion_sort(tbl)
 local mid=ceil(#tbl/2)
 return tbl[mid]
end

__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000770000000000700070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700070000900000700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00770070000900007007700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00007007009990077077000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000700009a90070070077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
07770000009a90070000770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000009a90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000009aa9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
9999999999aaaa999999999900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
9aaaaaaaaaaaaaaaaaaaaa9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
09aaaaaaaaaaaaaaaaaa990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0099aaaaaaaaaaaaaaa9000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00009aaaaaaaaaaaa990077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7770099aaaaaaaaa9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000009aaaaaaaa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000009aaaaaa99000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70000000aaaaaaaa9007777700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
07777009aaaaaaaa9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000009aaaaaaaa9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000009aa9999aa9900700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00007099a900009a9900077700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00770099900000099900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700090000000000900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
